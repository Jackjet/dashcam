/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.mokey.acupple.dashcam.common.models.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-8")
public class Span implements org.apache.thrift.TBase<Span, Span._Fields>, java.io.Serializable, Cloneable, Comparable<Span> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Span");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("spanType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spanId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stopTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LOG_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("logEvents", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField UNFINISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("unfinished", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField ROUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("route", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processId", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpanTupleSchemeFactory());
  }

  public String name; // required
  public String serviceName; // required
  public String hostIp; // required
  /**
   * 
   * @see SpanType
   */
  public SpanType spanType; // required
  public long traceId; // required
  public long spanId; // required
  public long parentId; // required
  public long startTime; // required
  public long stopTime; // required
  public List<LogEvent> logEvents; // required
  public boolean unfinished; // required
  public long threadId; // required
  public long sequenceNo; // optional
  public String route; // optional
  public Map<String,String> attributes; // optional
  public String appId; // optional
  public String hostName; // optional
  public long processId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SERVICE_NAME((short)2, "serviceName"),
    HOST_IP((short)3, "hostIp"),
    /**
     *
     * @see SpanType
     */
    SPAN_TYPE((short)4, "spanType"),
    TRACE_ID((short)5, "traceId"),
    SPAN_ID((short)6, "spanId"),
    PARENT_ID((short)7, "parentId"),
    START_TIME((short)8, "startTime"),
    STOP_TIME((short)9, "stopTime"),
    LOG_EVENTS((short)10, "logEvents"),
    UNFINISHED((short)11, "unfinished"),
    THREAD_ID((short)12, "threadId"),
    SEQUENCE_NO((short)13, "sequenceNo"),
    ROUTE((short)14, "route"),
    ATTRIBUTES((short)15, "attributes"),
    APP_ID((short)16, "appId"),
    HOST_NAME((short)17, "hostName"),
    PROCESS_ID((short)18, "processId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // HOST_IP
          return HOST_IP;
        case 4: // SPAN_TYPE
          return SPAN_TYPE;
        case 5: // TRACE_ID
          return TRACE_ID;
        case 6: // SPAN_ID
          return SPAN_ID;
        case 7: // PARENT_ID
          return PARENT_ID;
        case 8: // START_TIME
          return START_TIME;
        case 9: // STOP_TIME
          return STOP_TIME;
        case 10: // LOG_EVENTS
          return LOG_EVENTS;
        case 11: // UNFINISHED
          return UNFINISHED;
        case 12: // THREAD_ID
          return THREAD_ID;
        case 13: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 14: // ROUTE
          return ROUTE;
        case 15: // ATTRIBUTES
          return ATTRIBUTES;
        case 16: // APP_ID
          return APP_ID;
        case 17: // HOST_NAME
          return HOST_NAME;
        case 18: // PROCESS_ID
          return PROCESS_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACEID_ISSET_ID = 0;
  private static final int __SPANID_ISSET_ID = 1;
  private static final int __PARENTID_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __STOPTIME_ISSET_ID = 4;
  private static final int __UNFINISHED_ISSET_ID = 5;
  private static final int __THREADID_ISSET_ID = 6;
  private static final int __SEQUENCENO_ISSET_ID = 7;
  private static final int __PROCESSID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SEQUENCE_NO, _Fields.ROUTE, _Fields.ATTRIBUTES, _Fields.APP_ID, _Fields.HOST_NAME, _Fields.PROCESS_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("spanType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SpanType.class)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("spanId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("stopTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("logEvents", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogEvent.class))));
    tmpMap.put(_Fields.UNFINISHED, new org.apache.thrift.meta_data.FieldMetaData("unfinished", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROUTE, new org.apache.thrift.meta_data.FieldMetaData("route", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("processId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
  }

  public Span(
    String name,
    String serviceName,
    String hostIp,
    SpanType spanType,
    long traceId,
    long spanId,
    long parentId,
    long startTime,
    long stopTime,
    List<LogEvent> logEvents,
    boolean unfinished,
    long threadId)
  {
    this();
    this.name = name;
    this.serviceName = serviceName;
    this.hostIp = hostIp;
    this.spanType = spanType;
    this.traceId = traceId;
    setTraceIdIsSet(true);
    this.spanId = spanId;
    setSpanIdIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.stopTime = stopTime;
    setStopTimeIsSet(true);
    this.logEvents = logEvents;
    this.unfinished = unfinished;
    setUnfinishedIsSet(true);
    this.threadId = threadId;
    setThreadIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetHostIp()) {
      this.hostIp = other.hostIp;
    }
    if (other.isSetSpanType()) {
      this.spanType = other.spanType;
    }
    this.traceId = other.traceId;
    this.spanId = other.spanId;
    this.parentId = other.parentId;
    this.startTime = other.startTime;
    this.stopTime = other.stopTime;
    if (other.isSetLogEvents()) {
      List<LogEvent> __this__logEvents = new ArrayList<LogEvent>(other.logEvents.size());
      for (LogEvent other_element : other.logEvents) {
        __this__logEvents.add(new LogEvent(other_element));
      }
      this.logEvents = __this__logEvents;
    }
    this.unfinished = other.unfinished;
    this.threadId = other.threadId;
    this.sequenceNo = other.sequenceNo;
    if (other.isSetRoute()) {
      this.route = other.route;
    }
    if (other.isSetAttributes()) {
      Map<String,String> __this__attributes = new HashMap<String,String>(other.attributes);
      this.attributes = __this__attributes;
    }
    if (other.isSetAppId()) {
      this.appId = other.appId;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.processId = other.processId;
  }

  public Span deepCopy() {
    return new Span(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.serviceName = null;
    this.hostIp = null;
    this.spanType = null;
    setTraceIdIsSet(false);
    this.traceId = 0;
    setSpanIdIsSet(false);
    this.spanId = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setStopTimeIsSet(false);
    this.stopTime = 0;
    this.logEvents = null;
    setUnfinishedIsSet(false);
    this.unfinished = false;
    setThreadIdIsSet(false);
    this.threadId = 0;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
    this.route = null;
    this.attributes = null;
    this.appId = null;
    this.hostName = null;
    setProcessIdIsSet(false);
    this.processId = 0;
  }

  public String getName() {
    return this.name;
  }

  public Span setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public Span setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String getHostIp() {
    return this.hostIp;
  }

  public Span setHostIp(String hostIp) {
    this.hostIp = hostIp;
    return this;
  }

  public void unsetHostIp() {
    this.hostIp = null;
  }

  /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
  public boolean isSetHostIp() {
    return this.hostIp != null;
  }

  public void setHostIpIsSet(boolean value) {
    if (!value) {
      this.hostIp = null;
    }
  }

  /**
   *
   * @see SpanType
   */
  public SpanType getSpanType() {
    return this.spanType;
  }

  /**
   *
   * @see SpanType
   */
  public Span setSpanType(SpanType spanType) {
    this.spanType = spanType;
    return this;
  }

  public void unsetSpanType() {
    this.spanType = null;
  }

  /** Returns true if field spanType is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanType() {
    return this.spanType != null;
  }

  public void setSpanTypeIsSet(boolean value) {
    if (!value) {
      this.spanType = null;
    }
  }

  public long getTraceId() {
    return this.traceId;
  }

  public Span setTraceId(long traceId) {
    this.traceId = traceId;
    setTraceIdIsSet(true);
    return this;
  }

  public void unsetTraceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  public void setTraceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEID_ISSET_ID, value);
  }

  public long getSpanId() {
    return this.spanId;
  }

  public Span setSpanId(long spanId) {
    this.spanId = spanId;
    setSpanIdIsSet(true);
    return this;
  }

  public void unsetSpanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  /** Returns true if field spanId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPANID_ISSET_ID);
  }

  public void setSpanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANID_ISSET_ID, value);
  }

  public long getParentId() {
    return this.parentId;
  }

  public Span setParentId(long parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public Span setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getStopTime() {
    return this.stopTime;
  }

  public Span setStopTime(long stopTime) {
    this.stopTime = stopTime;
    setStopTimeIsSet(true);
    return this;
  }

  public void unsetStopTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPTIME_ISSET_ID);
  }

  /** Returns true if field stopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStopTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPTIME_ISSET_ID);
  }

  public void setStopTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPTIME_ISSET_ID, value);
  }

  public int getLogEventsSize() {
    return (this.logEvents == null) ? 0 : this.logEvents.size();
  }

  public java.util.Iterator<LogEvent> getLogEventsIterator() {
    return (this.logEvents == null) ? null : this.logEvents.iterator();
  }

  public void addToLogEvents(LogEvent elem) {
    if (this.logEvents == null) {
      this.logEvents = new ArrayList<LogEvent>();
    }
    this.logEvents.add(elem);
  }

  public List<LogEvent> getLogEvents() {
    return this.logEvents;
  }

  public Span setLogEvents(List<LogEvent> logEvents) {
    this.logEvents = logEvents;
    return this;
  }

  public void unsetLogEvents() {
    this.logEvents = null;
  }

  /** Returns true if field logEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetLogEvents() {
    return this.logEvents != null;
  }

  public void setLogEventsIsSet(boolean value) {
    if (!value) {
      this.logEvents = null;
    }
  }

  public boolean isUnfinished() {
    return this.unfinished;
  }

  public Span setUnfinished(boolean unfinished) {
    this.unfinished = unfinished;
    setUnfinishedIsSet(true);
    return this;
  }

  public void unsetUnfinished() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNFINISHED_ISSET_ID);
  }

  /** Returns true if field unfinished is set (has been assigned a value) and false otherwise */
  public boolean isSetUnfinished() {
    return EncodingUtils.testBit(__isset_bitfield, __UNFINISHED_ISSET_ID);
  }

  public void setUnfinishedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNFINISHED_ISSET_ID, value);
  }

  public long getThreadId() {
    return this.threadId;
  }

  public Span setThreadId(long threadId) {
    this.threadId = threadId;
    setThreadIdIsSet(true);
    return this;
  }

  public void unsetThreadId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADID_ISSET_ID);
  }

  /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadId() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADID_ISSET_ID);
  }

  public void setThreadIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADID_ISSET_ID, value);
  }

  public long getSequenceNo() {
    return this.sequenceNo;
  }

  public Span setSequenceNo(long sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public String getRoute() {
    return this.route;
  }

  public Span setRoute(String route) {
    this.route = route;
    return this;
  }

  public void unsetRoute() {
    this.route = null;
  }

  /** Returns true if field route is set (has been assigned a value) and false otherwise */
  public boolean isSetRoute() {
    return this.route != null;
  }

  public void setRouteIsSet(boolean value) {
    if (!value) {
      this.route = null;
    }
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public void putToAttributes(String key, String val) {
    if (this.attributes == null) {
      this.attributes = new HashMap<String,String>();
    }
    this.attributes.put(key, val);
  }

  public Map<String,String> getAttributes() {
    return this.attributes;
  }

  public Span setAttributes(Map<String,String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public String getAppId() {
    return this.appId;
  }

  public Span setAppId(String appId) {
    this.appId = appId;
    return this;
  }

  public void unsetAppId() {
    this.appId = null;
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return this.appId != null;
  }

  public void setAppIdIsSet(boolean value) {
    if (!value) {
      this.appId = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public Span setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public long getProcessId() {
    return this.processId;
  }

  public Span setProcessId(long processId) {
    this.processId = processId;
    setProcessIdIsSet(true);
    return this;
  }

  public void unsetProcessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSID_ISSET_ID);
  }

  /** Returns true if field processId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSID_ISSET_ID);
  }

  public void setProcessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case HOST_IP:
      if (value == null) {
        unsetHostIp();
      } else {
        setHostIp((String)value);
      }
      break;

    case SPAN_TYPE:
      if (value == null) {
        unsetSpanType();
      } else {
        setSpanType((SpanType)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpanId();
      } else {
        setSpanId((Long)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case STOP_TIME:
      if (value == null) {
        unsetStopTime();
      } else {
        setStopTime((Long)value);
      }
      break;

    case LOG_EVENTS:
      if (value == null) {
        unsetLogEvents();
      } else {
        setLogEvents((List<LogEvent>)value);
      }
      break;

    case UNFINISHED:
      if (value == null) {
        unsetUnfinished();
      } else {
        setUnfinished((Boolean)value);
      }
      break;

    case THREAD_ID:
      if (value == null) {
        unsetThreadId();
      } else {
        setThreadId((Long)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Long)value);
      }
      break;

    case ROUTE:
      if (value == null) {
        unsetRoute();
      } else {
        setRoute((String)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((Map<String,String>)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case PROCESS_ID:
      if (value == null) {
        unsetProcessId();
      } else {
        setProcessId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SERVICE_NAME:
      return getServiceName();

    case HOST_IP:
      return getHostIp();

    case SPAN_TYPE:
      return getSpanType();

    case TRACE_ID:
      return Long.valueOf(getTraceId());

    case SPAN_ID:
      return Long.valueOf(getSpanId());

    case PARENT_ID:
      return Long.valueOf(getParentId());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case STOP_TIME:
      return Long.valueOf(getStopTime());

    case LOG_EVENTS:
      return getLogEvents();

    case UNFINISHED:
      return Boolean.valueOf(isUnfinished());

    case THREAD_ID:
      return Long.valueOf(getThreadId());

    case SEQUENCE_NO:
      return Long.valueOf(getSequenceNo());

    case ROUTE:
      return getRoute();

    case ATTRIBUTES:
      return getAttributes();

    case APP_ID:
      return getAppId();

    case HOST_NAME:
      return getHostName();

    case PROCESS_ID:
      return Long.valueOf(getProcessId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SERVICE_NAME:
      return isSetServiceName();
    case HOST_IP:
      return isSetHostIp();
    case SPAN_TYPE:
      return isSetSpanType();
    case TRACE_ID:
      return isSetTraceId();
    case SPAN_ID:
      return isSetSpanId();
    case PARENT_ID:
      return isSetParentId();
    case START_TIME:
      return isSetStartTime();
    case STOP_TIME:
      return isSetStopTime();
    case LOG_EVENTS:
      return isSetLogEvents();
    case UNFINISHED:
      return isSetUnfinished();
    case THREAD_ID:
      return isSetThreadId();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    case ROUTE:
      return isSetRoute();
    case ATTRIBUTES:
      return isSetAttributes();
    case APP_ID:
      return isSetAppId();
    case HOST_NAME:
      return isSetHostName();
    case PROCESS_ID:
      return isSetProcessId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_hostIp = true && this.isSetHostIp();
    boolean that_present_hostIp = true && that.isSetHostIp();
    if (this_present_hostIp || that_present_hostIp) {
      if (!(this_present_hostIp && that_present_hostIp))
        return false;
      if (!this.hostIp.equals(that.hostIp))
        return false;
    }

    boolean this_present_spanType = true && this.isSetSpanType();
    boolean that_present_spanType = true && that.isSetSpanType();
    if (this_present_spanType || that_present_spanType) {
      if (!(this_present_spanType && that_present_spanType))
        return false;
      if (!this.spanType.equals(that.spanType))
        return false;
    }

    boolean this_present_traceId = true;
    boolean that_present_traceId = true;
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (this.traceId != that.traceId)
        return false;
    }

    boolean this_present_spanId = true;
    boolean that_present_spanId = true;
    if (this_present_spanId || that_present_spanId) {
      if (!(this_present_spanId && that_present_spanId))
        return false;
      if (this.spanId != that.spanId)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_stopTime = true;
    boolean that_present_stopTime = true;
    if (this_present_stopTime || that_present_stopTime) {
      if (!(this_present_stopTime && that_present_stopTime))
        return false;
      if (this.stopTime != that.stopTime)
        return false;
    }

    boolean this_present_logEvents = true && this.isSetLogEvents();
    boolean that_present_logEvents = true && that.isSetLogEvents();
    if (this_present_logEvents || that_present_logEvents) {
      if (!(this_present_logEvents && that_present_logEvents))
        return false;
      if (!this.logEvents.equals(that.logEvents))
        return false;
    }

    boolean this_present_unfinished = true;
    boolean that_present_unfinished = true;
    if (this_present_unfinished || that_present_unfinished) {
      if (!(this_present_unfinished && that_present_unfinished))
        return false;
      if (this.unfinished != that.unfinished)
        return false;
    }

    boolean this_present_threadId = true;
    boolean that_present_threadId = true;
    if (this_present_threadId || that_present_threadId) {
      if (!(this_present_threadId && that_present_threadId))
        return false;
      if (this.threadId != that.threadId)
        return false;
    }

    boolean this_present_sequenceNo = true && this.isSetSequenceNo();
    boolean that_present_sequenceNo = true && that.isSetSequenceNo();
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    boolean this_present_route = true && this.isSetRoute();
    boolean that_present_route = true && that.isSetRoute();
    if (this_present_route || that_present_route) {
      if (!(this_present_route && that_present_route))
        return false;
      if (!this.route.equals(that.route))
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (!this.appId.equals(that.appId))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_processId = true && this.isSetProcessId();
    boolean that_present_processId = true && that.isSetProcessId();
    if (this_present_processId || that_present_processId) {
      if (!(this_present_processId && that_present_processId))
        return false;
      if (this.processId != that.processId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_serviceName = true && (isSetServiceName());
    list.add(present_serviceName);
    if (present_serviceName)
      list.add(serviceName);

    boolean present_hostIp = true && (isSetHostIp());
    list.add(present_hostIp);
    if (present_hostIp)
      list.add(hostIp);

    boolean present_spanType = true && (isSetSpanType());
    list.add(present_spanType);
    if (present_spanType)
      list.add(spanType.getValue());

    boolean present_traceId = true;
    list.add(present_traceId);
    if (present_traceId)
      list.add(traceId);

    boolean present_spanId = true;
    list.add(present_spanId);
    if (present_spanId)
      list.add(spanId);

    boolean present_parentId = true;
    list.add(present_parentId);
    if (present_parentId)
      list.add(parentId);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_stopTime = true;
    list.add(present_stopTime);
    if (present_stopTime)
      list.add(stopTime);

    boolean present_logEvents = true && (isSetLogEvents());
    list.add(present_logEvents);
    if (present_logEvents)
      list.add(logEvents);

    boolean present_unfinished = true;
    list.add(present_unfinished);
    if (present_unfinished)
      list.add(unfinished);

    boolean present_threadId = true;
    list.add(present_threadId);
    if (present_threadId)
      list.add(threadId);

    boolean present_sequenceNo = true && (isSetSequenceNo());
    list.add(present_sequenceNo);
    if (present_sequenceNo)
      list.add(sequenceNo);

    boolean present_route = true && (isSetRoute());
    list.add(present_route);
    if (present_route)
      list.add(route);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    boolean present_appId = true && (isSetAppId());
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_hostName = true && (isSetHostName());
    list.add(present_hostName);
    if (present_hostName)
      list.add(hostName);

    boolean present_processId = true && (isSetProcessId());
    list.add(present_processId);
    if (present_processId)
      list.add(processId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Span other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanType()).compareTo(other.isSetSpanType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanType, other.spanType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanId()).compareTo(other.isSetSpanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanId, other.spanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopTime()).compareTo(other.isSetStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopTime, other.stopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogEvents()).compareTo(other.isSetLogEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logEvents, other.logEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnfinished()).compareTo(other.isSetUnfinished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnfinished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unfinished, other.unfinished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadId()).compareTo(other.isSetThreadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoute()).compareTo(other.isSetRoute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.route, other.route);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessId()).compareTo(other.isSetProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processId, other.processId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostIp:");
    if (this.hostIp == null) {
      sb.append("null");
    } else {
      sb.append(this.hostIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanType:");
    if (this.spanType == null) {
      sb.append("null");
    } else {
      sb.append(this.spanType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceId:");
    sb.append(this.traceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spanId:");
    sb.append(this.spanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopTime:");
    sb.append(this.stopTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logEvents:");
    if (this.logEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.logEvents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unfinished:");
    sb.append(this.unfinished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadId:");
    sb.append(this.threadId);
    first = false;
    if (isSetSequenceNo()) {
      if (!first) sb.append(", ");
      sb.append("sequenceNo:");
      sb.append(this.sequenceNo);
      first = false;
    }
    if (isSetRoute()) {
      if (!first) sb.append(", ");
      sb.append("route:");
      if (this.route == null) {
        sb.append("null");
      } else {
        sb.append(this.route);
      }
      first = false;
    }
    if (isSetAttributes()) {
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      if (this.appId == null) {
        sb.append("null");
      } else {
        sb.append(this.appId);
      }
      first = false;
    }
    if (isSetHostName()) {
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
    }
    if (isSetProcessId()) {
      if (!first) sb.append(", ");
      sb.append("processId:");
      sb.append(this.processId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (name == null) {
      throw new TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (serviceName == null) {
      throw new TProtocolException("Required field 'serviceName' was not present! Struct: " + toString());
    }
    if (hostIp == null) {
      throw new TProtocolException("Required field 'hostIp' was not present! Struct: " + toString());
    }
    if (spanType == null) {
      throw new TProtocolException("Required field 'spanType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'traceId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'spanId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'parentId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stopTime' because it's a primitive and you chose the non-beans generator.
    if (logEvents == null) {
      throw new TProtocolException("Required field 'logEvents' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'unfinished' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'threadId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanStandardSchemeFactory implements SchemeFactory {
    public SpanStandardScheme getScheme() {
      return new SpanStandardScheme();
    }
  }

  private static class SpanStandardScheme extends StandardScheme<Span> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Span struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostIp = iprot.readString();
              struct.setHostIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPAN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spanType = SpanType.findByValue(iprot.readI32());
              struct.setSpanTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceId = iprot.readI64();
              struct.setTraceIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spanId = iprot.readI64();
              struct.setSpanIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.setParentIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stopTime = iprot.readI64();
              struct.setStopTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOG_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.logEvents = new ArrayList<LogEvent>(_list10.size);
                LogEvent _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new LogEvent();
                  _elem11.read(iprot);
                  struct.logEvents.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setLogEventsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNFINISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unfinished = iprot.readBool();
              struct.setUnfinishedIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.threadId = iprot.readI64();
              struct.setThreadIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceNo = iprot.readI64();
              struct.setSequenceNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.route = iprot.readString();
              struct.setRouteIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.attributes = new HashMap<String,String>(2*_map13.size);
                String _key14;
                String _val15;
                for (int _i16 = 0; _i16 < _map13.size; ++_i16)
                {
                  _key14 = iprot.readString();
                  _val15 = iprot.readString();
                  struct.attributes.put(_key14, _val15);
                }
                iprot.readMapEnd();
              }
              struct.setAttributesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appId = iprot.readString();
              struct.setAppIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.processId = iprot.readI64();
              struct.setProcessIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTraceId()) {
        throw new TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSpanId()) {
        throw new TProtocolException("Required field 'spanId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentId()) {
        throw new TProtocolException("Required field 'parentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTime()) {
        throw new TProtocolException("Required field 'startTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStopTime()) {
        throw new TProtocolException("Required field 'stopTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUnfinished()) {
        throw new TProtocolException("Required field 'unfinished' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetThreadId()) {
        throw new TProtocolException("Required field 'threadId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Span struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.hostIp != null) {
        oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
        oprot.writeString(struct.hostIp);
        oprot.writeFieldEnd();
      }
      if (struct.spanType != null) {
        oprot.writeFieldBegin(SPAN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.spanType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.traceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.spanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
      oprot.writeI64(struct.stopTime);
      oprot.writeFieldEnd();
      if (struct.logEvents != null) {
        oprot.writeFieldBegin(LOG_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logEvents.size()));
          for (LogEvent _iter17 : struct.logEvents)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNFINISHED_FIELD_DESC);
      oprot.writeBool(struct.unfinished);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
      oprot.writeI64(struct.threadId);
      oprot.writeFieldEnd();
      if (struct.isSetSequenceNo()) {
        oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
        oprot.writeI64(struct.sequenceNo);
        oprot.writeFieldEnd();
      }
      if (struct.route != null) {
        if (struct.isSetRoute()) {
          oprot.writeFieldBegin(ROUTE_FIELD_DESC);
          oprot.writeString(struct.route);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attributes != null) {
        if (struct.isSetAttributes()) {
          oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));
            for (Map.Entry<String, String> _iter18 : struct.attributes.entrySet())
            {
              oprot.writeString(_iter18.getKey());
              oprot.writeString(_iter18.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appId != null) {
        if (struct.isSetAppId()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.appId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostName != null) {
        if (struct.isSetHostName()) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProcessId()) {
        oprot.writeFieldBegin(PROCESS_ID_FIELD_DESC);
        oprot.writeI64(struct.processId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanTupleSchemeFactory implements SchemeFactory {
    public SpanTupleScheme getScheme() {
      return new SpanTupleScheme();
    }
  }

  private static class SpanTupleScheme extends TupleScheme<Span> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Span struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeString(struct.serviceName);
      oprot.writeString(struct.hostIp);
      oprot.writeI32(struct.spanType.getValue());
      oprot.writeI64(struct.traceId);
      oprot.writeI64(struct.spanId);
      oprot.writeI64(struct.parentId);
      oprot.writeI64(struct.startTime);
      oprot.writeI64(struct.stopTime);
      {
        oprot.writeI32(struct.logEvents.size());
        for (LogEvent _iter19 : struct.logEvents)
        {
          _iter19.write(oprot);
        }
      }
      oprot.writeBool(struct.unfinished);
      oprot.writeI64(struct.threadId);
      BitSet optionals = new BitSet();
      if (struct.isSetSequenceNo()) {
        optionals.set(0);
      }
      if (struct.isSetRoute()) {
        optionals.set(1);
      }
      if (struct.isSetAttributes()) {
        optionals.set(2);
      }
      if (struct.isSetAppId()) {
        optionals.set(3);
      }
      if (struct.isSetHostName()) {
        optionals.set(4);
      }
      if (struct.isSetProcessId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSequenceNo()) {
        oprot.writeI64(struct.sequenceNo);
      }
      if (struct.isSetRoute()) {
        oprot.writeString(struct.route);
      }
      if (struct.isSetAttributes()) {
        {
          oprot.writeI32(struct.attributes.size());
          for (Map.Entry<String, String> _iter20 : struct.attributes.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
        }
      }
      if (struct.isSetAppId()) {
        oprot.writeString(struct.appId);
      }
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetProcessId()) {
        oprot.writeI64(struct.processId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Span struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.serviceName = iprot.readString();
      struct.setServiceNameIsSet(true);
      struct.hostIp = iprot.readString();
      struct.setHostIpIsSet(true);
      struct.spanType = SpanType.findByValue(iprot.readI32());
      struct.setSpanTypeIsSet(true);
      struct.traceId = iprot.readI64();
      struct.setTraceIdIsSet(true);
      struct.spanId = iprot.readI64();
      struct.setSpanIdIsSet(true);
      struct.parentId = iprot.readI64();
      struct.setParentIdIsSet(true);
      struct.startTime = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.stopTime = iprot.readI64();
      struct.setStopTimeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.logEvents = new ArrayList<LogEvent>(_list21.size);
        LogEvent _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new LogEvent();
          _elem22.read(iprot);
          struct.logEvents.add(_elem22);
        }
      }
      struct.setLogEventsIsSet(true);
      struct.unfinished = iprot.readBool();
      struct.setUnfinishedIsSet(true);
      struct.threadId = iprot.readI64();
      struct.setThreadIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sequenceNo = iprot.readI64();
        struct.setSequenceNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.route = iprot.readString();
        struct.setRouteIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attributes = new HashMap<String,String>(2*_map24.size);
          String _key25;
          String _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            struct.attributes.put(_key25, _val26);
          }
        }
        struct.setAttributesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appId = iprot.readString();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.processId = iprot.readI64();
        struct.setProcessIdIsSet(true);
      }
    }
  }

}

