//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.LogLevel = {
  'DEBUG' : 0,
  'INFO' : 1,
  'WARN' : 2,
  'ERROR' : 3,
  'FATAL' : 4
};
ttypes.LogType = {
  'OTHER' : 0,
  'APP' : 1,
  'URL' : 2,
  'WEB_SERVICE' : 3,
  'SQL' : 4,
  'MEMCACHED' : 5
};
ttypes.SpanType = {
  'OTHER' : 0,
  'URL' : 1,
  'WEB_SERVICE' : 2,
  'SQL' : 3,
  'MEMCACHED' : 4
};
ttypes.MetricValueType = {
  'TYPE_FLOAT' : 0,
  'TYPE_LONG' : 1
};
ttypes.ResultCode = {
  'SUCCESS' : 0,
  'FAILURE' : 1,
  'TRY_LATER' : 2
};
LogEvent = module.exports.LogEvent = function(args) {
  this.id = -1;
  this.logType = null;
  this.createdTime = null;
  this.threadId = null;
  this.traceId = null;
  this.logLevel = null;
  this.attributes = null;
  this.title = null;
  this.message = null;
  this.source = null;
  this.sequenceNo = null;
  this.route = null;
  this.spanId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.logType !== undefined) {
      this.logType = args.logType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logType is unset!');
    }
    if (args.createdTime !== undefined) {
      this.createdTime = args.createdTime;
    }
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    }
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.logLevel !== undefined) {
      this.logLevel = args.logLevel;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.sequenceNo !== undefined) {
      this.sequenceNo = args.sequenceNo;
    }
    if (args.route !== undefined) {
      this.route = args.route;
    }
    if (args.spanId !== undefined) {
      this.spanId = args.spanId;
    }
  }
};
LogEvent.prototype = {};
LogEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.logType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.threadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.logLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.attributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.attributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.sequenceNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.route = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogEvent.prototype.write = function(output) {
  output.writeStructBegin('LogEvent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.logType !== null && this.logType !== undefined) {
    output.writeFieldBegin('logType', Thrift.Type.I32, 2);
    output.writeI32(this.logType);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 3);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I64, 4);
    output.writeI64(this.threadId);
    output.writeFieldEnd();
  }
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 5);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.logLevel !== null && this.logLevel !== undefined) {
    output.writeFieldBegin('logLevel', Thrift.Type.I32, 6);
    output.writeI32(this.logLevel);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter8 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.attributes[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 8);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 9);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 10);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
    output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 11);
    output.writeI64(this.sequenceNo);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRING, 12);
    output.writeString(this.route);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 13);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Span = module.exports.Span = function(args) {
  this.name = null;
  this.serviceName = null;
  this.hostIp = null;
  this.spanType = null;
  this.traceId = null;
  this.spanId = null;
  this.parentId = null;
  this.startTime = null;
  this.stopTime = null;
  this.logEvents = null;
  this.unfinished = null;
  this.threadId = null;
  this.sequenceNo = null;
  this.route = null;
  this.attributes = null;
  this.appId = null;
  this.hostName = null;
  this.processId = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.serviceName !== undefined) {
      this.serviceName = args.serviceName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serviceName is unset!');
    }
    if (args.hostIp !== undefined) {
      this.hostIp = args.hostIp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostIp is unset!');
    }
    if (args.spanType !== undefined) {
      this.spanType = args.spanType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanType is unset!');
    }
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field traceId is unset!');
    }
    if (args.spanId !== undefined) {
      this.spanId = args.spanId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spanId is unset!');
    }
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parentId is unset!');
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
    if (args.stopTime !== undefined) {
      this.stopTime = args.stopTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field stopTime is unset!');
    }
    if (args.logEvents !== undefined) {
      this.logEvents = args.logEvents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logEvents is unset!');
    }
    if (args.unfinished !== undefined) {
      this.unfinished = args.unfinished;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unfinished is unset!');
    }
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.sequenceNo !== undefined) {
      this.sequenceNo = args.sequenceNo;
    }
    if (args.route !== undefined) {
      this.route = args.route;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
    if (args.hostName !== undefined) {
      this.hostName = args.hostName;
    }
    if (args.processId !== undefined) {
      this.processId = args.processId;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.spanType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.parentId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.stopTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.logEvents = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.LogEvent();
          elem16.read(input);
          this.logEvents.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.unfinished = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.threadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.sequenceNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.route = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.MAP) {
        var _size17 = 0;
        var _rtmp321;
        this.attributes = {};
        var _ktype18 = 0;
        var _vtype19 = 0;
        _rtmp321 = input.readMapBegin();
        _ktype18 = _rtmp321.ktype;
        _vtype19 = _rtmp321.vtype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var key23 = null;
          var val24 = null;
          key23 = input.readString();
          val24 = input.readString();
          this.attributes[key23] = val24;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.processId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 2);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.hostIp !== null && this.hostIp !== undefined) {
    output.writeFieldBegin('hostIp', Thrift.Type.STRING, 3);
    output.writeString(this.hostIp);
    output.writeFieldEnd();
  }
  if (this.spanType !== null && this.spanType !== undefined) {
    output.writeFieldBegin('spanType', Thrift.Type.I32, 4);
    output.writeI32(this.spanType);
    output.writeFieldEnd();
  }
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 5);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 6);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.I64, 7);
    output.writeI64(this.parentId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.stopTime !== null && this.stopTime !== undefined) {
    output.writeFieldBegin('stopTime', Thrift.Type.I64, 9);
    output.writeI64(this.stopTime);
    output.writeFieldEnd();
  }
  if (this.logEvents !== null && this.logEvents !== undefined) {
    output.writeFieldBegin('logEvents', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.logEvents.length);
    for (var iter25 in this.logEvents)
    {
      if (this.logEvents.hasOwnProperty(iter25))
      {
        iter25 = this.logEvents[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unfinished !== null && this.unfinished !== undefined) {
    output.writeFieldBegin('unfinished', Thrift.Type.BOOL, 11);
    output.writeBool(this.unfinished);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I64, 12);
    output.writeI64(this.threadId);
    output.writeFieldEnd();
  }
  if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
    output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 13);
    output.writeI64(this.sequenceNo);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRING, 14);
    output.writeString(this.route);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 15);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter26 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter26))
      {
        var viter27 = this.attributes[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 16);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 17);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.processId !== null && this.processId !== undefined) {
    output.writeFieldBegin('processId', Thrift.Type.I64, 18);
    output.writeI64(this.processId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricEvent = module.exports.MetricEvent = function(args) {
  this.createdTime = null;
  this.name = null;
  this.value = null;
  this.valueType = null;
  this.tags = null;
  this.sequenceNo = null;
  this.route = null;
  if (args) {
    if (args.createdTime !== undefined) {
      this.createdTime = args.createdTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createdTime is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.valueType !== undefined) {
      this.valueType = args.valueType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueType is unset!');
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tags is unset!');
    }
    if (args.sequenceNo !== undefined) {
      this.sequenceNo = args.sequenceNo;
    }
    if (args.route !== undefined) {
      this.route = args.route;
    }
  }
};
MetricEvent.prototype = {};
MetricEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.valueType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size28 = 0;
        var _rtmp332;
        this.tags = [];
        var _etype31 = 0;
        _rtmp332 = input.readSetBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString();
          this.tags.push(elem34);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.sequenceNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.route = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricEvent.prototype.write = function(output) {
  output.writeStructBegin('MetricEvent');
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 1);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.valueType !== null && this.valueType !== undefined) {
    output.writeFieldBegin('valueType', Thrift.Type.I32, 4);
    output.writeI32(this.valueType);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter35 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter35))
      {
        iter35 = this.tags[iter35];
        output.writeString(iter35);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
    output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 6);
    output.writeI64(this.sequenceNo);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRING, 7);
    output.writeString(this.route);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Event = module.exports.Event = function(args) {
  this.nameSpace = null;
  this.name = null;
  this.time = null;
  this.attributes = null;
  this.sequenceNo = null;
  this.route = null;
  if (args) {
    if (args.nameSpace !== undefined) {
      this.nameSpace = args.nameSpace;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameSpace is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.time !== undefined) {
      this.time = args.time;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field time is unset!');
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attributes is unset!');
    }
    if (args.sequenceNo !== undefined) {
      this.sequenceNo = args.sequenceNo;
    }
    if (args.route !== undefined) {
      this.route = args.route;
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nameSpace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size36 = 0;
        var _rtmp340;
        this.attributes = {};
        var _ktype37 = 0;
        var _vtype38 = 0;
        _rtmp340 = input.readMapBegin();
        _ktype37 = _rtmp340.ktype;
        _vtype38 = _rtmp340.vtype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var key42 = null;
          var val43 = null;
          key42 = input.readString();
          val43 = input.readString();
          this.attributes[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.sequenceNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.route = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.nameSpace !== null && this.nameSpace !== undefined) {
    output.writeFieldBegin('nameSpace', Thrift.Type.STRING, 1);
    output.writeString(this.nameSpace);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter44 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter44))
      {
        var viter45 = this.attributes[kiter44];
        output.writeString(kiter44);
        output.writeString(viter45);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
    output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 6);
    output.writeI64(this.sequenceNo);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRING, 7);
    output.writeString(this.route);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Chunk = module.exports.Chunk = function(args) {
  this.hostIp = null;
  this.hostName = null;
  this.appId = null;
  this.processId = null;
  this.logEvents = null;
  this.spans = null;
  this.metrics = null;
  this.events = null;
  this.sequenceNo = null;
  this.route = null;
  this.env = null;
  this.envGroup = null;
  if (args) {
    if (args.hostIp !== undefined) {
      this.hostIp = args.hostIp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostIp is unset!');
    }
    if (args.hostName !== undefined) {
      this.hostName = args.hostName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostName is unset!');
    }
    if (args.appId !== undefined) {
      this.appId = args.appId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appId is unset!');
    }
    if (args.processId !== undefined) {
      this.processId = args.processId;
    }
    if (args.logEvents !== undefined) {
      this.logEvents = args.logEvents;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logEvents is unset!');
    }
    if (args.spans !== undefined) {
      this.spans = args.spans;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field spans is unset!');
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metrics is unset!');
    }
    if (args.events !== undefined) {
      this.events = args.events;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field events is unset!');
    }
    if (args.sequenceNo !== undefined) {
      this.sequenceNo = args.sequenceNo;
    }
    if (args.route !== undefined) {
      this.route = args.route;
    }
    if (args.env !== undefined) {
      this.env = args.env;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field env is unset!');
    }
    if (args.envGroup !== undefined) {
      this.envGroup = args.envGroup;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field envGroup is unset!');
    }
  }
};
Chunk.prototype = {};
Chunk.prototype = {};
Chunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.appId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.processId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.logEvents = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new ttypes.LogEvent();
          elem52.read(input);
          this.logEvents.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size53 = 0;
        var _rtmp357;
        this.spans = [];
        var _etype56 = 0;
        _rtmp357 = input.readListBegin();
        _etype56 = _rtmp357.etype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          var elem59 = null;
          elem59 = new ttypes.Span();
          elem59.read(input);
          this.spans.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.metrics = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new ttypes.MetricEvent();
          elem66.read(input);
          this.metrics.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size67 = 0;
        var _rtmp371;
        this.events = [];
        var _etype70 = 0;
        _rtmp371 = input.readListBegin();
        _etype70 = _rtmp371.etype;
        _size67 = _rtmp371.size;
        for (var _i72 = 0; _i72 < _size67; ++_i72)
        {
          var elem73 = null;
          elem73 = new ttypes.Event();
          elem73.read(input);
          this.events.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.sequenceNo = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.route = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.env = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.envGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Chunk.prototype.write = function(output) {
  output.writeStructBegin('Chunk');
  if (this.hostIp !== null && this.hostIp !== undefined) {
    output.writeFieldBegin('hostIp', Thrift.Type.STRING, 1);
    output.writeString(this.hostIp);
    output.writeFieldEnd();
  }
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 2);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.I32, 3);
    output.writeI32(this.appId);
    output.writeFieldEnd();
  }
  if (this.processId !== null && this.processId !== undefined) {
    output.writeFieldBegin('processId', Thrift.Type.I64, 4);
    output.writeI64(this.processId);
    output.writeFieldEnd();
  }
  if (this.logEvents !== null && this.logEvents !== undefined) {
    output.writeFieldBegin('logEvents', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.logEvents.length);
    for (var iter74 in this.logEvents)
    {
      if (this.logEvents.hasOwnProperty(iter74))
      {
        iter74 = this.logEvents[iter74];
        iter74.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spans !== null && this.spans !== undefined) {
    output.writeFieldBegin('spans', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
    for (var iter75 in this.spans)
    {
      if (this.spans.hasOwnProperty(iter75))
      {
        iter75 = this.spans[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.metrics.length);
    for (var iter76 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter76))
      {
        iter76 = this.metrics[iter76];
        iter76.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter77 in this.events)
    {
      if (this.events.hasOwnProperty(iter77))
      {
        iter77 = this.events[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sequenceNo !== null && this.sequenceNo !== undefined) {
    output.writeFieldBegin('sequenceNo', Thrift.Type.I64, 9);
    output.writeI64(this.sequenceNo);
    output.writeFieldEnd();
  }
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRING, 10);
    output.writeString(this.route);
    output.writeFieldEnd();
  }
  if (this.env !== null && this.env !== undefined) {
    output.writeFieldBegin('env', Thrift.Type.STRING, 11);
    output.writeString(this.env);
    output.writeFieldEnd();
  }
  if (this.envGroup !== null && this.envGroup !== undefined) {
    output.writeFieldBegin('envGroup', Thrift.Type.STRING, 12);
    output.writeString(this.envGroup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.resultCode = null;
  if (args) {
    if (args.resultCode !== undefined) {
      this.resultCode = args.resultCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resultCode is unset!');
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resultCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.resultCode !== null && this.resultCode !== undefined) {
    output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
    output.writeI32(this.resultCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

