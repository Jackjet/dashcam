/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.mokey.acupple.dashcam.common.models.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-8")
public class Chunk implements org.apache.thrift.TBase<Chunk, Chunk._Fields>, java.io.Serializable, Cloneable, Comparable<Chunk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chunk");

  private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LOG_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("logEvents", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("spans", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("events", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ROUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("route", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ENV_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("envGroup", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChunkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChunkTupleSchemeFactory());
  }

  public String hostIp; // required
  public String hostName; // required
  public int appId; // required
  public long processId; // optional
  public List<LogEvent> logEvents; // required
  public List<Span> spans; // required
  public List<MetricEvent> metrics; // required
  public List<Event> events; // required
  public long sequenceNo; // optional
  public String route; // optional
  public String env; // required
  public String envGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_IP((short)1, "hostIp"),
    HOST_NAME((short)2, "hostName"),
    APP_ID((short)3, "appId"),
    PROCESS_ID((short)4, "processId"),
    LOG_EVENTS((short)5, "logEvents"),
    SPANS((short)6, "spans"),
    METRICS((short)7, "metrics"),
    EVENTS((short)8, "events"),
    SEQUENCE_NO((short)9, "sequenceNo"),
    ROUTE((short)10, "route"),
    ENV((short)11, "env"),
    ENV_GROUP((short)12, "envGroup");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_IP
          return HOST_IP;
        case 2: // HOST_NAME
          return HOST_NAME;
        case 3: // APP_ID
          return APP_ID;
        case 4: // PROCESS_ID
          return PROCESS_ID;
        case 5: // LOG_EVENTS
          return LOG_EVENTS;
        case 6: // SPANS
          return SPANS;
        case 7: // METRICS
          return METRICS;
        case 8: // EVENTS
          return EVENTS;
        case 9: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 10: // ROUTE
          return ROUTE;
        case 11: // ENV
          return ENV;
        case 12: // ENV_GROUP
          return ENV_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private static final int __PROCESSID_ISSET_ID = 1;
  private static final int __SEQUENCENO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROCESS_ID, _Fields.SEQUENCE_NO, _Fields.ROUTE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("processId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOG_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("logEvents", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogEvent.class))));
    tmpMap.put(_Fields.SPANS, new org.apache.thrift.meta_data.FieldMetaData("spans", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Span.class))));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricEvent.class))));
    tmpMap.put(_Fields.EVENTS, new org.apache.thrift.meta_data.FieldMetaData("events", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class))));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROUTE, new org.apache.thrift.meta_data.FieldMetaData("route", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV_GROUP, new org.apache.thrift.meta_data.FieldMetaData("envGroup", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chunk.class, metaDataMap);
  }

  public Chunk() {
  }

  public Chunk(
    String hostIp,
    String hostName,
    int appId,
    List<LogEvent> logEvents,
    List<Span> spans,
    List<MetricEvent> metrics,
    List<Event> events,
    String env,
    String envGroup)
  {
    this();
    this.hostIp = hostIp;
    this.hostName = hostName;
    this.appId = appId;
    setAppIdIsSet(true);
    this.logEvents = logEvents;
    this.spans = spans;
    this.metrics = metrics;
    this.events = events;
    this.env = env;
    this.envGroup = envGroup;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chunk(Chunk other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostIp()) {
      this.hostIp = other.hostIp;
    }
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    this.appId = other.appId;
    this.processId = other.processId;
    if (other.isSetLogEvents()) {
      List<LogEvent> __this__logEvents = new ArrayList<LogEvent>(other.logEvents.size());
      for (LogEvent other_element : other.logEvents) {
        __this__logEvents.add(new LogEvent(other_element));
      }
      this.logEvents = __this__logEvents;
    }
    if (other.isSetSpans()) {
      List<Span> __this__spans = new ArrayList<Span>(other.spans.size());
      for (Span other_element : other.spans) {
        __this__spans.add(new Span(other_element));
      }
      this.spans = __this__spans;
    }
    if (other.isSetMetrics()) {
      List<MetricEvent> __this__metrics = new ArrayList<MetricEvent>(other.metrics.size());
      for (MetricEvent other_element : other.metrics) {
        __this__metrics.add(new MetricEvent(other_element));
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetEvents()) {
      List<Event> __this__events = new ArrayList<Event>(other.events.size());
      for (Event other_element : other.events) {
        __this__events.add(new Event(other_element));
      }
      this.events = __this__events;
    }
    this.sequenceNo = other.sequenceNo;
    if (other.isSetRoute()) {
      this.route = other.route;
    }
    if (other.isSetEnv()) {
      this.env = other.env;
    }
    if (other.isSetEnvGroup()) {
      this.envGroup = other.envGroup;
    }
  }

  public Chunk deepCopy() {
    return new Chunk(this);
  }

  @Override
  public void clear() {
    this.hostIp = null;
    this.hostName = null;
    setAppIdIsSet(false);
    this.appId = 0;
    setProcessIdIsSet(false);
    this.processId = 0;
    this.logEvents = null;
    this.spans = null;
    this.metrics = null;
    this.events = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
    this.route = null;
    this.env = null;
    this.envGroup = null;
  }

  public String getHostIp() {
    return this.hostIp;
  }

  public Chunk setHostIp(String hostIp) {
    this.hostIp = hostIp;
    return this;
  }

  public void unsetHostIp() {
    this.hostIp = null;
  }

  /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
  public boolean isSetHostIp() {
    return this.hostIp != null;
  }

  public void setHostIpIsSet(boolean value) {
    if (!value) {
      this.hostIp = null;
    }
  }

  public String getHostName() {
    return this.hostName;
  }

  public Chunk setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public int getAppId() {
    return this.appId;
  }

  public Chunk setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public long getProcessId() {
    return this.processId;
  }

  public Chunk setProcessId(long processId) {
    this.processId = processId;
    setProcessIdIsSet(true);
    return this;
  }

  public void unsetProcessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROCESSID_ISSET_ID);
  }

  /** Returns true if field processId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROCESSID_ISSET_ID);
  }

  public void setProcessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROCESSID_ISSET_ID, value);
  }

  public int getLogEventsSize() {
    return (this.logEvents == null) ? 0 : this.logEvents.size();
  }

  public java.util.Iterator<LogEvent> getLogEventsIterator() {
    return (this.logEvents == null) ? null : this.logEvents.iterator();
  }

  public void addToLogEvents(LogEvent elem) {
    if (this.logEvents == null) {
      this.logEvents = new ArrayList<LogEvent>();
    }
    this.logEvents.add(elem);
  }

  public List<LogEvent> getLogEvents() {
    return this.logEvents;
  }

  public Chunk setLogEvents(List<LogEvent> logEvents) {
    this.logEvents = logEvents;
    return this;
  }

  public void unsetLogEvents() {
    this.logEvents = null;
  }

  /** Returns true if field logEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetLogEvents() {
    return this.logEvents != null;
  }

  public void setLogEventsIsSet(boolean value) {
    if (!value) {
      this.logEvents = null;
    }
  }

  public int getSpansSize() {
    return (this.spans == null) ? 0 : this.spans.size();
  }

  public java.util.Iterator<Span> getSpansIterator() {
    return (this.spans == null) ? null : this.spans.iterator();
  }

  public void addToSpans(Span elem) {
    if (this.spans == null) {
      this.spans = new ArrayList<Span>();
    }
    this.spans.add(elem);
  }

  public List<Span> getSpans() {
    return this.spans;
  }

  public Chunk setSpans(List<Span> spans) {
    this.spans = spans;
    return this;
  }

  public void unsetSpans() {
    this.spans = null;
  }

  /** Returns true if field spans is set (has been assigned a value) and false otherwise */
  public boolean isSetSpans() {
    return this.spans != null;
  }

  public void setSpansIsSet(boolean value) {
    if (!value) {
      this.spans = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<MetricEvent> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(MetricEvent elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<MetricEvent>();
    }
    this.metrics.add(elem);
  }

  public List<MetricEvent> getMetrics() {
    return this.metrics;
  }

  public Chunk setMetrics(List<MetricEvent> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  public java.util.Iterator<Event> getEventsIterator() {
    return (this.events == null) ? null : this.events.iterator();
  }

  public void addToEvents(Event elem) {
    if (this.events == null) {
      this.events = new ArrayList<Event>();
    }
    this.events.add(elem);
  }

  public List<Event> getEvents() {
    return this.events;
  }

  public Chunk setEvents(List<Event> events) {
    this.events = events;
    return this;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  public long getSequenceNo() {
    return this.sequenceNo;
  }

  public Chunk setSequenceNo(long sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public String getRoute() {
    return this.route;
  }

  public Chunk setRoute(String route) {
    this.route = route;
    return this;
  }

  public void unsetRoute() {
    this.route = null;
  }

  /** Returns true if field route is set (has been assigned a value) and false otherwise */
  public boolean isSetRoute() {
    return this.route != null;
  }

  public void setRouteIsSet(boolean value) {
    if (!value) {
      this.route = null;
    }
  }

  public String getEnv() {
    return this.env;
  }

  public Chunk setEnv(String env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  public String getEnvGroup() {
    return this.envGroup;
  }

  public Chunk setEnvGroup(String envGroup) {
    this.envGroup = envGroup;
    return this;
  }

  public void unsetEnvGroup() {
    this.envGroup = null;
  }

  /** Returns true if field envGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvGroup() {
    return this.envGroup != null;
  }

  public void setEnvGroupIsSet(boolean value) {
    if (!value) {
      this.envGroup = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_IP:
      if (value == null) {
        unsetHostIp();
      } else {
        setHostIp((String)value);
      }
      break;

    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    case PROCESS_ID:
      if (value == null) {
        unsetProcessId();
      } else {
        setProcessId((Long)value);
      }
      break;

    case LOG_EVENTS:
      if (value == null) {
        unsetLogEvents();
      } else {
        setLogEvents((List<LogEvent>)value);
      }
      break;

    case SPANS:
      if (value == null) {
        unsetSpans();
      } else {
        setSpans((List<Span>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<MetricEvent>)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((List<Event>)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Long)value);
      }
      break;

    case ROUTE:
      if (value == null) {
        unsetRoute();
      } else {
        setRoute((String)value);
      }
      break;

    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((String)value);
      }
      break;

    case ENV_GROUP:
      if (value == null) {
        unsetEnvGroup();
      } else {
        setEnvGroup((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_IP:
      return getHostIp();

    case HOST_NAME:
      return getHostName();

    case APP_ID:
      return Integer.valueOf(getAppId());

    case PROCESS_ID:
      return Long.valueOf(getProcessId());

    case LOG_EVENTS:
      return getLogEvents();

    case SPANS:
      return getSpans();

    case METRICS:
      return getMetrics();

    case EVENTS:
      return getEvents();

    case SEQUENCE_NO:
      return Long.valueOf(getSequenceNo());

    case ROUTE:
      return getRoute();

    case ENV:
      return getEnv();

    case ENV_GROUP:
      return getEnvGroup();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_IP:
      return isSetHostIp();
    case HOST_NAME:
      return isSetHostName();
    case APP_ID:
      return isSetAppId();
    case PROCESS_ID:
      return isSetProcessId();
    case LOG_EVENTS:
      return isSetLogEvents();
    case SPANS:
      return isSetSpans();
    case METRICS:
      return isSetMetrics();
    case EVENTS:
      return isSetEvents();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    case ROUTE:
      return isSetRoute();
    case ENV:
      return isSetEnv();
    case ENV_GROUP:
      return isSetEnvGroup();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chunk)
      return this.equals((Chunk)that);
    return false;
  }

  public boolean equals(Chunk that) {
    if (that == null)
      return false;

    boolean this_present_hostIp = true && this.isSetHostIp();
    boolean that_present_hostIp = true && that.isSetHostIp();
    if (this_present_hostIp || that_present_hostIp) {
      if (!(this_present_hostIp && that_present_hostIp))
        return false;
      if (!this.hostIp.equals(that.hostIp))
        return false;
    }

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_appId = true;
    boolean that_present_appId = true;
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_processId = true && this.isSetProcessId();
    boolean that_present_processId = true && that.isSetProcessId();
    if (this_present_processId || that_present_processId) {
      if (!(this_present_processId && that_present_processId))
        return false;
      if (this.processId != that.processId)
        return false;
    }

    boolean this_present_logEvents = true && this.isSetLogEvents();
    boolean that_present_logEvents = true && that.isSetLogEvents();
    if (this_present_logEvents || that_present_logEvents) {
      if (!(this_present_logEvents && that_present_logEvents))
        return false;
      if (!this.logEvents.equals(that.logEvents))
        return false;
    }

    boolean this_present_spans = true && this.isSetSpans();
    boolean that_present_spans = true && that.isSetSpans();
    if (this_present_spans || that_present_spans) {
      if (!(this_present_spans && that_present_spans))
        return false;
      if (!this.spans.equals(that.spans))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    boolean this_present_sequenceNo = true && this.isSetSequenceNo();
    boolean that_present_sequenceNo = true && that.isSetSequenceNo();
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    boolean this_present_route = true && this.isSetRoute();
    boolean that_present_route = true && that.isSetRoute();
    if (this_present_route || that_present_route) {
      if (!(this_present_route && that_present_route))
        return false;
      if (!this.route.equals(that.route))
        return false;
    }

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    boolean this_present_envGroup = true && this.isSetEnvGroup();
    boolean that_present_envGroup = true && that.isSetEnvGroup();
    if (this_present_envGroup || that_present_envGroup) {
      if (!(this_present_envGroup && that_present_envGroup))
        return false;
      if (!this.envGroup.equals(that.envGroup))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hostIp = true && (isSetHostIp());
    list.add(present_hostIp);
    if (present_hostIp)
      list.add(hostIp);

    boolean present_hostName = true && (isSetHostName());
    list.add(present_hostName);
    if (present_hostName)
      list.add(hostName);

    boolean present_appId = true;
    list.add(present_appId);
    if (present_appId)
      list.add(appId);

    boolean present_processId = true && (isSetProcessId());
    list.add(present_processId);
    if (present_processId)
      list.add(processId);

    boolean present_logEvents = true && (isSetLogEvents());
    list.add(present_logEvents);
    if (present_logEvents)
      list.add(logEvents);

    boolean present_spans = true && (isSetSpans());
    list.add(present_spans);
    if (present_spans)
      list.add(spans);

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_events = true && (isSetEvents());
    list.add(present_events);
    if (present_events)
      list.add(events);

    boolean present_sequenceNo = true && (isSetSequenceNo());
    list.add(present_sequenceNo);
    if (present_sequenceNo)
      list.add(sequenceNo);

    boolean present_route = true && (isSetRoute());
    list.add(present_route);
    if (present_route)
      list.add(route);

    boolean present_env = true && (isSetEnv());
    list.add(present_env);
    if (present_env)
      list.add(env);

    boolean present_envGroup = true && (isSetEnvGroup());
    list.add(present_envGroup);
    if (present_envGroup)
      list.add(envGroup);

    return list.hashCode();
  }

  @Override
  public int compareTo(Chunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessId()).compareTo(other.isSetProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processId, other.processId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogEvents()).compareTo(other.isSetLogEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logEvents, other.logEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpans()).compareTo(other.isSetSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spans, other.spans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents()).compareTo(other.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events, other.events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoute()).compareTo(other.isSetRoute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.route, other.route);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvGroup()).compareTo(other.isSetEnvGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envGroup, other.envGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chunk(");
    boolean first = true;

    sb.append("hostIp:");
    if (this.hostIp == null) {
      sb.append("null");
    } else {
      sb.append(this.hostIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostName:");
    if (this.hostName == null) {
      sb.append("null");
    } else {
      sb.append(this.hostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appId:");
    sb.append(this.appId);
    first = false;
    if (isSetProcessId()) {
      if (!first) sb.append(", ");
      sb.append("processId:");
      sb.append(this.processId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("logEvents:");
    if (this.logEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.logEvents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spans:");
    if (this.spans == null) {
      sb.append("null");
    } else {
      sb.append(this.spans);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("events:");
    if (this.events == null) {
      sb.append("null");
    } else {
      sb.append(this.events);
    }
    first = false;
    if (isSetSequenceNo()) {
      if (!first) sb.append(", ");
      sb.append("sequenceNo:");
      sb.append(this.sequenceNo);
      first = false;
    }
    if (isSetRoute()) {
      if (!first) sb.append(", ");
      sb.append("route:");
      if (this.route == null) {
        sb.append("null");
      } else {
        sb.append(this.route);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("env:");
    if (this.env == null) {
      sb.append("null");
    } else {
      sb.append(this.env);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("envGroup:");
    if (this.envGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.envGroup);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (hostIp == null) {
      throw new TProtocolException("Required field 'hostIp' was not present! Struct: " + toString());
    }
    if (hostName == null) {
      throw new TProtocolException("Required field 'hostName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'appId' because it's a primitive and you chose the non-beans generator.
    if (logEvents == null) {
      throw new TProtocolException("Required field 'logEvents' was not present! Struct: " + toString());
    }
    if (spans == null) {
      throw new TProtocolException("Required field 'spans' was not present! Struct: " + toString());
    }
    if (metrics == null) {
      throw new TProtocolException("Required field 'metrics' was not present! Struct: " + toString());
    }
    if (events == null) {
      throw new TProtocolException("Required field 'events' was not present! Struct: " + toString());
    }
    if (env == null) {
      throw new TProtocolException("Required field 'env' was not present! Struct: " + toString());
    }
    if (envGroup == null) {
      throw new TProtocolException("Required field 'envGroup' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChunkStandardSchemeFactory implements SchemeFactory {
    public ChunkStandardScheme getScheme() {
      return new ChunkStandardScheme();
    }
  }

  private static class ChunkStandardScheme extends StandardScheme<Chunk> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chunk struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostIp = iprot.readString();
              struct.setHostIpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.processId = iprot.readI64();
              struct.setProcessIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOG_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.logEvents = new ArrayList<LogEvent>(_list46.size);
                LogEvent _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = new LogEvent();
                  _elem47.read(iprot);
                  struct.logEvents.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setLogEventsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.spans = new ArrayList<Span>(_list49.size);
                Span _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = new Span();
                  _elem50.read(iprot);
                  struct.spans.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setSpansIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.metrics = new ArrayList<MetricEvent>(_list52.size);
                MetricEvent _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new MetricEvent();
                  _elem53.read(iprot);
                  struct.metrics.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.events = new ArrayList<Event>(_list55.size);
                Event _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new Event();
                  _elem56.read(iprot);
                  struct.events.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setEventsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sequenceNo = iprot.readI64();
              struct.setSequenceNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.route = iprot.readString();
              struct.setRouteIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.env = iprot.readString();
              struct.setEnvIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENV_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envGroup = iprot.readString();
              struct.setEnvGroupIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAppId()) {
        throw new TProtocolException("Required field 'appId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chunk struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostIp != null) {
        oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
        oprot.writeString(struct.hostIp);
        oprot.writeFieldEnd();
      }
      if (struct.hostName != null) {
        oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
        oprot.writeString(struct.hostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APP_ID_FIELD_DESC);
      oprot.writeI32(struct.appId);
      oprot.writeFieldEnd();
      if (struct.isSetProcessId()) {
        oprot.writeFieldBegin(PROCESS_ID_FIELD_DESC);
        oprot.writeI64(struct.processId);
        oprot.writeFieldEnd();
      }
      if (struct.logEvents != null) {
        oprot.writeFieldBegin(LOG_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.logEvents.size()));
          for (LogEvent _iter58 : struct.logEvents)
          {
            _iter58.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.spans != null) {
        oprot.writeFieldBegin(SPANS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spans.size()));
          for (Span _iter59 : struct.spans)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
          for (MetricEvent _iter60 : struct.metrics)
          {
            _iter60.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.events != null) {
        oprot.writeFieldBegin(EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.events.size()));
          for (Event _iter61 : struct.events)
          {
            _iter61.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
        oprot.writeI64(struct.sequenceNo);
        oprot.writeFieldEnd();
      }
      if (struct.route != null) {
        if (struct.isSetRoute()) {
          oprot.writeFieldBegin(ROUTE_FIELD_DESC);
          oprot.writeString(struct.route);
          oprot.writeFieldEnd();
        }
      }
      if (struct.env != null) {
        oprot.writeFieldBegin(ENV_FIELD_DESC);
        oprot.writeString(struct.env);
        oprot.writeFieldEnd();
      }
      if (struct.envGroup != null) {
        oprot.writeFieldBegin(ENV_GROUP_FIELD_DESC);
        oprot.writeString(struct.envGroup);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChunkTupleSchemeFactory implements SchemeFactory {
    public ChunkTupleScheme getScheme() {
      return new ChunkTupleScheme();
    }
  }

  private static class ChunkTupleScheme extends TupleScheme<Chunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.hostIp);
      oprot.writeString(struct.hostName);
      oprot.writeI32(struct.appId);
      {
        oprot.writeI32(struct.logEvents.size());
        for (LogEvent _iter62 : struct.logEvents)
        {
          _iter62.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.spans.size());
        for (Span _iter63 : struct.spans)
        {
          _iter63.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.metrics.size());
        for (MetricEvent _iter64 : struct.metrics)
        {
          _iter64.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.events.size());
        for (Event _iter65 : struct.events)
        {
          _iter65.write(oprot);
        }
      }
      oprot.writeString(struct.env);
      oprot.writeString(struct.envGroup);
      BitSet optionals = new BitSet();
      if (struct.isSetProcessId()) {
        optionals.set(0);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(1);
      }
      if (struct.isSetRoute()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProcessId()) {
        oprot.writeI64(struct.processId);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI64(struct.sequenceNo);
      }
      if (struct.isSetRoute()) {
        oprot.writeString(struct.route);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chunk struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.hostIp = iprot.readString();
      struct.setHostIpIsSet(true);
      struct.hostName = iprot.readString();
      struct.setHostNameIsSet(true);
      struct.appId = iprot.readI32();
      struct.setAppIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.logEvents = new ArrayList<LogEvent>(_list66.size);
        LogEvent _elem67;
        for (int _i68 = 0; _i68 < _list66.size; ++_i68)
        {
          _elem67 = new LogEvent();
          _elem67.read(iprot);
          struct.logEvents.add(_elem67);
        }
      }
      struct.setLogEventsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.spans = new ArrayList<Span>(_list69.size);
        Span _elem70;
        for (int _i71 = 0; _i71 < _list69.size; ++_i71)
        {
          _elem70 = new Span();
          _elem70.read(iprot);
          struct.spans.add(_elem70);
        }
      }
      struct.setSpansIsSet(true);
      {
        org.apache.thrift.protocol.TList _list72 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.metrics = new ArrayList<MetricEvent>(_list72.size);
        MetricEvent _elem73;
        for (int _i74 = 0; _i74 < _list72.size; ++_i74)
        {
          _elem73 = new MetricEvent();
          _elem73.read(iprot);
          struct.metrics.add(_elem73);
        }
      }
      struct.setMetricsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.events = new ArrayList<Event>(_list75.size);
        Event _elem76;
        for (int _i77 = 0; _i77 < _list75.size; ++_i77)
        {
          _elem76 = new Event();
          _elem76.read(iprot);
          struct.events.add(_elem76);
        }
      }
      struct.setEventsIsSet(true);
      struct.env = iprot.readString();
      struct.setEnvIsSet(true);
      struct.envGroup = iprot.readString();
      struct.setEnvGroupIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.processId = iprot.readI64();
        struct.setProcessIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sequenceNo = iprot.readI64();
        struct.setSequenceNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.route = iprot.readString();
        struct.setRouteIsSet(true);
      }
    }
  }

}

